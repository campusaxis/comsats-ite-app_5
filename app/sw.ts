/// <reference lib="webworker" />
import { PrecacheEntry } from "workbox-precaching"

declare const self: ServiceWorkerGlobalScope

// Import Workbox libraries
import { clientsClaim } from 'workbox-core'
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching'
import { registerRoute, NavigationRoute } from 'workbox-routing'
import { NetworkFirst, StaleWhileRevalidate, CacheFirst } from 'workbox-strategies'
import { CacheableResponsePlugin } from 'workbox-cacheable-response'
import { ExpirationPlugin } from 'workbox-expiration'
import { BackgroundSyncPlugin } from 'workbox-background-sync'

// Claim clients immediately
clientsClaim()

// Precache and route all assets generated by Next.js
precacheAndRoute(self.__WB_MANIFEST as PrecacheEntry[])

// Cache page navigations (App Shell pattern)
const handler = createHandlerBoundToURL('/index.html')
const navigationRoute = new NavigationRoute(handler, {
  // Allowlist all routes except those matching specific patterns
  allowlist: [
    new RegExp('/'),
    new RegExp('/community'),
    new RegExp('/community/.*'),
    new RegExp('/faculty'),
    new RegExp('/faculty/.*'),
    new RegExp('/past-papers'),
    new RegExp('/past-papers/.*'),
    new RegExp('/gpa-calculator'),
    new RegExp('/news'),
    new RegExp('/resources'),
    new RegExp('/support'),
  ],
  // Denylist certain paths
  denylist: [
    new RegExp('/api/'),
    new RegExp('/admin/'),
  ],
})
registerRoute(navigationRoute)

// Cache CSS, JS, and Web Worker requests with a Stale While Revalidate strategy
registerRoute(
  // Cache CSS and JS files
  ({ request }) => request.destination === 'style' || request.destination === 'script',
  new StaleWhileRevalidate({
    cacheName: 'static-resources',
  })
)

// Cache images with a Cache First strategy
registerRoute(
  // Cache images
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      }),
    ],
  })
)

// Cache API responses with a Network First strategy for fresh data
registerRoute(
  // Cache API responses
  ({ url }) => url.pathname.startsWith('/api/'),
  new NetworkFirst({
    cacheName: 'api-responses',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 5 * 60, // 5 Minutes
      }),
    ],
  })
)

// Cache community posts with a Network First strategy
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/community/posts'),
  new NetworkFirst({
    cacheName: 'community-posts',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 15 * 60, // 15 Minutes
      }),
    ],
  })
)

// Background sync for offline post creation
const bgSyncPlugin = new BackgroundSyncPlugin('post-queue', {
  maxRetentionTime: 24 * 60, // Retry for max of 24 Hours
})

// Handle POST requests to community posts API with background sync
registerRoute(
  ({ url, request }) => url.pathname === '/api/community/posts' && request.method === 'POST',
  new NetworkFirst({
    cacheName: 'post-submissions',
    plugins: [bgSyncPlugin],
  }),
  'POST'
)

// Handle background sync for offline post creation
self.addEventListener('sync', (event: any) => {
  if (event.tag === 'sync-posts') {
    (event as SyncEvent).waitUntil(syncPosts())
  }
})

async function syncPosts() {
  // Retrieve pending posts from IndexedDB
  // This would require implementing IndexedDB storage for offline posts
  console.log('Syncing offline posts...')
}

// Handle push notifications
self.addEventListener('push', (event: any) => {
  if (event.data) {
    const data = event.data.json()
    const title = data.title || 'CampusAxis Notification'
    const options = {
      body: data.body || 'You have a new notification',
      icon: '/icon-192x192.png',
      badge: '/icon-192x192.png',
      data: {
        url: data.url || '/',
      },
    }
    
    (event as PushEvent).waitUntil(
      self.registration.showNotification(title, options)
    )
  }
})

// Handle notification clicks
self.addEventListener('notificationclick', (event: any) => {
  event.notification.close()
  
  (event as NotificationEvent).waitUntil(
    self.clients.matchAll({ type: 'window' }).then((clientList) => {
      // If there's already a window open, focus it
      for (const client of clientList) {
        if (client.url === '/' && 'focus' in client) {
          return client.focus()
        }
      }
      
      // If not, open a new window
      if (self.clients.openWindow) {
        return self.clients.openWindow('/')
      }
    })
  )
})

async function updateCommunityPosts() {
  // Update community posts in background
  console.log('Updating community posts in background...')
}

// Handle messages from client
self.addEventListener('message', (event: any) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting()
  }
})