/// <reference lib="webworker" />
import { PrecacheEntry } from "workbox-precaching"

declare const self: ServiceWorkerGlobalScope

// Import Workbox libraries
import { clientsClaim } from 'workbox-core'
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching'
import { registerRoute, NavigationRoute } from 'workbox-routing'
import { NetworkFirst, StaleWhileRevalidate, CacheFirst } from 'workbox-strategies'
import { CacheableResponsePlugin } from 'workbox-cacheable-response'
import { ExpirationPlugin } from 'workbox-expiration'
import { BackgroundSyncPlugin } from 'workbox-background-sync'

// Claim clients immediately
clientsClaim()

// Precache and route all assets generated by Next.js
precacheAndRoute(self.__WB_MANIFEST as PrecacheEntry[])

// Cache page navigations (App Shell pattern) - Enhanced for cross-browser compatibility
const handler = createHandlerBoundToURL('/index.html')
const navigationRoute = new NavigationRoute(handler, {
  // Allowlist all routes except those matching specific patterns
  allowlist: [
    new RegExp('/'),
    new RegExp('/community'),
    new RegExp('/community/.*'),
    new RegExp('/faculty'),
    new RegExp('/faculty/.*'),
    new RegExp('/past-papers'),
    new RegExp('/past-papers/.*'),
    new RegExp('/gpa-calculator'),
    new RegExp('/news'),
    new RegExp('/resources'),
    new RegExp('/support'),
    new RegExp('/lost-found'),
    new RegExp('/guidance'),
    new RegExp('/blog'),
    new RegExp('/admin'),
    new RegExp('/profile'),
    new RegExp('/settings'),
  ],
  // Denylist certain paths
  denylist: [
    new RegExp('/api/'),
    new RegExp('/admin/'),
    new RegExp('/_next/data/'),
  ],
})
registerRoute(navigationRoute)

// Cache CSS, JS, and Web Worker requests with a Stale While Revalidate strategy
registerRoute(
  // Cache CSS and JS files
  ({ request }) => request.destination === 'style' || request.destination === 'script',
  new StaleWhileRevalidate({
    cacheName: 'static-resources',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 7 * 24 * 60 * 60, // 7 Days
      }),
    ],
  })
)

// Cache images with a Cache First strategy - Enhanced for better browser support
registerRoute(
  // Cache images
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      }),
    ],
  })
)

// Cache fonts with a Cache First strategy for better performance
registerRoute(
  ({ request }) => request.destination === 'font',
  new CacheFirst({
    cacheName: 'fonts',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 20,
        maxAgeSeconds: 365 * 24 * 60 * 60, // 1 Year
      }),
    ],
  })
)

// Cache API responses with a Network First strategy for fresh data
registerRoute(
  // Cache API responses
  ({ url }) => url.pathname.startsWith('/api/'),
  new NetworkFirst({
    cacheName: 'api-responses',
    networkTimeoutSeconds: 3,
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 5 * 60, // 5 Minutes
      }),
    ],
  })
)

// Enhanced caching for admin API responses
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/admin/'),
  new NetworkFirst({
    cacheName: 'admin-api-responses',
    networkTimeoutSeconds: 5,
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 150,
        maxAgeSeconds: 10 * 60, // 10 Minutes
      }),
    ],
  })
)

// Cache community posts with a Network First strategy
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/community/posts'),
  new NetworkFirst({
    cacheName: 'community-posts',
    networkTimeoutSeconds: 3,
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 150,
        maxAgeSeconds: 15 * 60, // 15 Minutes
      }),
    ],
  })
)

// Cache admin dashboard data
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/admin/dashboard'),
  new NetworkFirst({
    cacheName: 'admin-dashboard',
    networkTimeoutSeconds: 3,
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 75,
        maxAgeSeconds: 5 * 60, // 5 Minutes
      }),
    ],
  })
)

// Cache faculty data with Stale While Revalidate for better performance
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/faculty'),
  new StaleWhileRevalidate({
    cacheName: 'faculty-data',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 30 * 60, // 30 Minutes
      }),
    ],
  })
)

// Cache past papers data
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/past-papers'),
  new StaleWhileRevalidate({
    cacheName: 'past-papers-data',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 200,
        maxAgeSeconds: 60 * 60, // 1 Hour
      }),
    ],
  })
)

// Background sync for offline post creation
const bgSyncPlugin = new BackgroundSyncPlugin('post-queue', {
  maxRetentionTime: 24 * 60, // Retry for max of 24 Hours
})

// Handle POST requests to community posts API with background sync
registerRoute(
  ({ url, request }) => url.pathname === '/api/community/posts' && request.method === 'POST',
  new NetworkFirst({
    cacheName: 'post-submissions',
    networkTimeoutSeconds: 3,
    plugins: [bgSyncPlugin],
  }),
  'POST'
)

// Handle background sync for offline post creation
self.addEventListener('sync', (event: SyncEvent) => {
  if (event.tag === 'sync-posts') {
    event.waitUntil(syncPosts())
  }
})

// Handle background sync for admin actions
self.addEventListener('sync', (event: SyncEvent) => {
  if (event.tag === 'sync-admin-actions') {
    event.waitUntil(syncAdminActions())
  }
})

// Handle background sync for offline content creation
self.addEventListener('sync', (event: SyncEvent) => {
  if (event.tag === 'sync-content') {
    event.waitUntil(syncContent())
  }
})

async function syncPosts() {
  // Retrieve pending posts from IndexedDB
  // This would require implementing IndexedDB storage for offline posts
  console.log('Syncing offline posts...')
}

async function syncAdminActions() {
  // Retrieve pending admin actions from IndexedDB
  console.log('Syncing offline admin actions...')
  // This would sync pending admin actions like user management, content moderation, etc.
}

async function syncContent() {
  // Retrieve pending content from IndexedDB
  console.log('Syncing offline content...')
  // This would sync pending content like news articles, events, resources, etc.
}

// Handle push notifications with better cross-browser support
self.addEventListener('push', (event: PushEvent) => {
  if (event.data) {
    const data = event.data.json()
    const title = data.title || 'CampusAxis Notification'
    // Fix TypeScript error by properly typing the options object
    const options: NotificationOptions = {
      body: data.body || 'You have a new notification',
      icon: '/icon-192x192.png',
      badge: '/icon-192x192.png',
      data: {
        url: data.url || '/',
      },
    }
    
    event.waitUntil(
      self.registration.showNotification(title, options)
    )
  }
})

// Handle notification clicks with better cross-browser support
self.addEventListener('notificationclick', (event: NotificationEvent) => {
  event.notification.close()
  
  event.waitUntil(
    self.clients.matchAll({ type: 'window' }).then((clientList) => {
      // If there's already a window open, focus it
      for (const client of clientList) {
        if (client.url === event.notification.data.url && 'focus' in client) {
          return client.focus()
        }
      }
      
      // If not, open a new window
      if (self.clients.openWindow) {
        return self.clients.openWindow(event.notification.data.url || '/')
      }
    })
  )
})

async function updateCommunityPosts() {
  // Update community posts in background
  console.log('Updating community posts in background...')
}

// Handle messages from client
self.addEventListener('message', (event: ExtendableMessageEvent) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting()
  }
})

// Add support for periodic background sync (for modern browsers)
if ('periodicSync' in self.registration) {
  self.addEventListener('periodicSync', (event: any) => {
    if (event.tag === 'update-community-posts') {
      event.waitUntil(updateCommunityPosts())
    }
  })
}